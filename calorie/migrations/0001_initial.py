# Generated by Django 5.1.5 on 2025-03-10 12:07

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FoodCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Food Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CustomFoodRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Food Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('calories', models.FloatField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Calories (per 100g)')),
                ('protein', models.FloatField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Protein (per 100g)')),
                ('carbs', models.FloatField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Carbohydrates (per 100g)')),
                ('fat', models.FloatField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Fat (per 100g)')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20, verbose_name='Request Status')),
                ('admin_notes', models.TextField(blank=True, verbose_name='Admin Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('suggested_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='calorie.foodcategory', verbose_name='Suggested Category')),
            ],
        ),
        migrations.CreateModel(
            name='FoodItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('calories', models.FloatField(help_text='Calories per 100g', validators=[django.core.validators.MinValueValidator(0)])),
                ('protein', models.FloatField(help_text='Protein in grams per 100g', validators=[django.core.validators.MinValueValidator(0)])),
                ('carbs', models.FloatField(help_text='Carbohydrates in grams per 100g', validators=[django.core.validators.MinValueValidator(0)])),
                ('fat', models.FloatField(help_text='Fat in grams per 100g', validators=[django.core.validators.MinValueValidator(0)])),
                ('fiber', models.FloatField(blank=True, help_text='Fiber in grams per 100g', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('sugar', models.FloatField(blank=True, help_text='Sugar in grams per 100g', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('serving_size', models.FloatField(default=100, help_text='Default serving size in grams', validators=[django.core.validators.MinValueValidator(0)])),
                ('common_serving', models.CharField(blank=True, help_text='Common serving description (e.g., "1 cup", "1 slice")', max_length=100)),
                ('is_verified', models.BooleanField(default=False, help_text='Indicates if the nutritional information has been verified')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='foods', to='calorie.foodcategory')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserFoodLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(help_text='Amount in grams', validators=[django.core.validators.MinValueValidator(0)])),
                ('meal_type', models.CharField(choices=[('breakfast', 'Breakfast'), ('lunch', 'Lunch'), ('dinner', 'Dinner'), ('snack', 'Snack')], max_length=20)),
                ('date', models.DateField()),
                ('notes', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('food_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calorie.fooditem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date', '-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='fooditem',
            index=models.Index(fields=['name'], name='calorie_foo_name_413045_idx'),
        ),
    ]
